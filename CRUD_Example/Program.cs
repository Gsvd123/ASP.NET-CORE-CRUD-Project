
using CRUD_Example.Filters.ActionFilters;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Repositories;
using Repositorycontracts;
using Serilog;
using serviceclass;
using ServiceContracts;

var builder = WebApplication.CreateBuilder(args);


builder.Host.UseSerilog((HostBuilderContext context,IServiceProvider Services,LoggerConfiguration loggerConfiguration) =>
{
    loggerConfiguration.ReadFrom.Configuration(context.Configuration);//read configuration settings from built in Iconfiguration
    loggerConfiguration.ReadFrom.Services(Services); //readout the current app's services and make them available to serilog
});

builder.Services.AddHttpLogging(options =>
{
    options.LoggingFields = Microsoft.AspNetCore.HttpLogging.HttpLoggingFields.RequestPath;
});
//it adds controller and views to service
builder.Services.AddControllersWithViews(options => {
    
    //options.Filters.Add<PersonsListActionFilter>(5); without parameter 5= O7rder
    var logger=builder.Services.BuildServiceProvider().GetRequiredService<ILogger<ResponseHeaderFilter>>();

    options.Filters.Add(new ResponseHeaderFilter(logger, "X_GlobaL_Key", "X_Global_Value",2));
});
builder.Services.AddScoped<IPersonService, PersonService>();
builder.Services.AddScoped<ICountriesService, CountryService>();
builder.Services.AddScoped<IPersonsRepository,PersonsRepository>();
builder.Services.AddScoped<ICountriesRepository,CountriesRepository>();


//add PersonDbcontext as service
builder.Services.AddDbContext<ApplicationDbContext>(option=>
{
    option.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"));
});


if (builder.Environment.IsEnvironment("Test") == false)
{
    Rotativa.AspNetCore.RotativaConfiguration.Setup("wwwroot", wkhtmltopdfRelativePath: "Rotativa");
}

builder.Host.ConfigureLogging(loggingProvider =>
{
    loggingProvider.ClearProviders();

    loggingProvider.AddConsole();
    loggingProvider.AddDebug();
    loggingProvider.AddEventLog();


});


var app = builder.Build();

app.UseSerilogRequestLogging();
app.UseHttpLogging();

app.Logger.LogDebug("Debug message");

app.Logger.LogInformation("information message");

app.Logger.LogWarning("Warning message");

app.Logger.LogError("Error Message");

app.Logger.LogCritical("Critical message");




if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}



app.UseStaticFiles();   
app.UseRouting();   
app.MapControllers();





app.Run();

public partial class Program { } //make the autogenerated program acccessible automatically
